@using System.Net.Http.Json;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json.Linq;
@using TCPI_PR_Portal.Data;
@using TCPI_PR_Portal.Services;
@using TCPI_PR_Portal.Shared;
@using Newtonsoft.Json;
@inject IAuthService AuthService;
@inject ISnackbar Snackbar;
@inject HttpClient HttpClient;
@inject NavigationManager Navigation;
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWLocalStorageService LocalStorage;
@attribute [Authorize];

@page "/document-status";

<Title PageName="Document Status" Breadcrumb="_items" />

<MudTable Items="@PRRequests" T="PRHeaderDto" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<PRHeaderDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">&nbsp;</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>#</MudTh>
        <MudTh style="white-space: nowrap!important;">Project ID</MudTh>
        <MudTh style="white-space: nowrap!important;">Project Name</MudTh>
        <MudTh style="white-space: nowrap!important;">Location</MudTh>
        <MudTh style="white-space: nowrap!important;">PR Type</MudTh>
        <MudTh style="white-space: nowrap!important;">Document Number</MudTh>
        <MudTh style="white-space: nowrap!important;">Department</MudTh>
        <MudTh style="white-space: nowrap!important;">Branch</MudTh>
        <MudTh style="white-space: nowrap!important;">Status</MudTh>
        <MudTh style="white-space: nowrap!important;">Document Date</MudTh>
        <MudTh style="white-space: nowrap!important;">Required Date</MudTh>
        <MudTh style="white-space: nowrap!important;">Urgency Priority</MudTh>
        <MudTh style="white-space: nowrap!important;">Prepared By</MudTh>
        <MudTh style="white-space: nowrap!important;">Reviewed By</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved By (Level1)</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved By (Level2)</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved By (Level3)</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved By (Level4)</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved By (Special)</MudTh>
        <MudTh style="white-space: nowrap!important;">Approved Date</MudTh>
        <MudTh style="white-space: nowrap!important;">Remarks</MudTh>
        <MudTh style="white-space: nowrap!important;">Approver Remarks</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton OnClick="() => ViewDocument(context.U_DocEntry)" Icon="@Icons.Filled.RemoveRedEye" aria-label="View" Color="Color.Primary"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="DocEntry">
            @context.U_DocEntry
        </MudTd>
        <MudTd DataLabel="Project ID">
            @context.U_ProjectID
        </MudTd>
        <MudTd DataLabel="Project Name">
            @context.U_ProjName
        </MudTd>
        <MudTd DataLabel="Location">
            @context.U_Location
        </MudTd>
        <MudTd DataLabel="PR Type">
            @context.U_PRType
        </MudTd>
        <MudTd DataLabel="Document Number">
            @context.U_DocNum
        </MudTd>
        <MudTd DataLabel="Department">
            @context.U_Department
        </MudTd>
        <MudTd DataLabel="Branch">
            @context.U_Branch
        </MudTd>
        <MudTd DataLabel="Status">
            @context.U_DocStatus
        </MudTd>
        <MudTd DataLabel="Document Date">
            @context.U_TaxDate
        </MudTd>
        <MudTd DataLabel="Required Date">
            @context.U_ReqDate
        </MudTd>
        <MudTd DataLabel="Urgency Priority">
            @context.U_Urgency
        </MudTd>
        <MudTd DataLabel="Prepared By">
            @context.U_PreparedBy
        </MudTd>
        <MudTd DataLabel="Reviewed By">
            @context.U_ReviewedBy
        </MudTd>
        <MudTd DataLabel="Approved By (Level1)">
            @context.U_ApprovedBy1
        </MudTd>
        <MudTd DataLabel="Approved By (Level2)">
            @context.U_ApprovedBy2
        </MudTd>
        <MudTd DataLabel="Approved By (Level3)">
            @context.U_ApprovedBy3
        </MudTd>
        <MudTd DataLabel="Approved By (Level4)">
            @context.U_ApprovedBy4
        </MudTd>
        <MudTd DataLabel="Approved By (Special)">
            @context.U_ApprovedBySpecial
        </MudTd>
        <MudTd DataLabel="Approved Date">
            @context.U_ApprovedDate
        </MudTd>
        <MudTd DataLabel="Remarks">
            @context.U_Remarks
        </MudTd>
        <MudTd DataLabel="Approver Remarks">
            @context.U_ApproverRemarks
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    // table settings
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Document Status", href: "document-status", disabled: true)
    };

    //// <summary>
    /// from here all logic are tests refactor later
    /// </summary>
    private string searchString = "";
    private PRHeaderDto selectedItem1 = null;

    private List<PRLinesDto> _lines = new List<PRLinesDto>();

    //test data
    private List<PRHeaderDto> PRRequests = new List<PRHeaderDto>();
    PRHeaderResponse? PRHeaderResponse = new PRHeaderResponse();

    // get method json ang makukua,
    protected override async Task OnInitializedAsync()
    {
        string role = LocalStorage.GetItem<string>("Role");

        if (role == "Approver")
        {
            await GetMyRequestors();
        }

        if (role == "Requestor")
        {
            await GetMyRequests();
        }
    }

    private bool FilterFunc1(PRHeaderDto element) => FilterFunc(element, searchString);

    private bool FilterFunc(PRHeaderDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.U_ProjectID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.U_ProjName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
    void ViewDocument(int? docEntry)
    {
        Navigation.NavigateTo($"document-status/{docEntry}");
    }

    async Task GetMyRequests()
    {
        var userCode = LocalStorage.GetItem<string>("UserCode");
        using var response = await HttpClient.GetAsync($"U_FT_OPRQ?$filter=U_CardCode eq '{userCode}'");
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add(response.ReasonPhrase, Severity.Error);
        }

        PRHeaderResponse = await response.Content.ReadFromJsonAsync<PRHeaderResponse>();
        PRRequests = PRHeaderResponse.value;
    }

    async Task GetMyRequestors()
    {
        List<UserCodeDto> userCodes = new List<UserCodeDto>();
        string approvalLevel = LocalStorage.GetItem<string>("ApproverLevel");
        string userCode = LocalStorage.GetItem<string>("UserCode");
        Console.WriteLine(approvalLevel);
        string filterField = string.Empty;

        if (approvalLevel == "Level 1")
            filterField = "U_ApproverCode1";

        if (approvalLevel == "Level 2")
            filterField = "U_ApproverCode2";

        if (approvalLevel == "Level 3")
            filterField = "U_ApproverCode3";

        if (approvalLevel == "Level 4")
            filterField = "U_ApproverCode4";

        if (approvalLevel == "Special")
            filterField = "U_ApproverSpecialCode";

        string query = $"U_FT_WPUS?$select=U_UserCode&$filter={filterField} eq '{userCode}'";
        JObject user;
        do
        {
            user = await GetData(query);
            userCodes.AddRange(user["value"].ToObject<List<UserCodeDto>>());

            if (user.ContainsKey("odata.nextLink"))
                query = user["odata.nextLink"].ToString();
        } while (user.ContainsKey("odata.nextLink"));

        Console.WriteLine(JsonConvert.SerializeObject(userCodes));

        foreach (var code in userCodes)
        {
            string requestsQuery = $"U_FT_OPRQ?$filter=U_CardCode eq '{code.U_UserCode}'";
            JObject requests;
            do
            {
                requests = await GetData(requestsQuery);
                PRRequests.AddRange(requests["value"].ToObject<List<PRHeaderDto>>());

                if (requests.ContainsKey("odata.nextLink"))
                    requestsQuery = requests["odata.nextLink"].ToString();
            } while (requests.ContainsKey("odata.nextLink"));
        }
    }

    async Task<JObject> GetData(string query)
    {
        using var response = await HttpClient.GetAsync(query);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add(response.ReasonPhrase, Severity.Error);
        }
        string content = await response.Content.ReadAsStringAsync();
        return JObject.Parse(content);
    }
}