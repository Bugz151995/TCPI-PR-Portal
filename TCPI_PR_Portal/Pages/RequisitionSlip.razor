@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TCPI_PR_Portal.Data;
@using TCPI_PR_Portal.Shared;
@using System.Text;
@inject ISnackbar Snackbar;
@inject HttpClient HttpClient;
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWLocalStorageService LocalStorage;
@attribute [Authorize];

@page "/requisition-slip";

<Title PageName="Requisition Slip" Breadcrumb="_items" />

<EditForm Model="@PRHeader" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudGrid Spacing="2" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                <MudSelect Margin="Margin.Dense" T="string" Value="PRHeader.U_ProjectID" For="@(() => PRHeader.U_ProjectID)" ValueChanged="value => SelectProject(SelectedProject, value)" Label="Project ID" Variant="Variant.Outlined">
                    @foreach (var d in Projects)
                    {
                        <MudSelectItem Value="@d.Code">@d.Code</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="PRHeader.U_ProjName" Label="Project Name" For="@(() => PRHeader.U_ProjName)" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                <MudTextField @bind-Value="PRHeader.U_Location" Label="Location" For="@(() => PRHeader.U_Location)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudSelect Margin="Margin.Dense" T="string" @bind-Value="PRHeader.U_PRType" For="@(() => PRHeader.U_PRType)" Label="PR Type" Variant="Variant.Outlined">
                    @*for loop here if there is a supplier array data*@
                    <MudSelectItem Value="@("Regular")" />
                    <MudSelectItem Value="@("Special - IT")" />
                    <MudSelectItem Value="@("Special - Safety")" />
                </MudSelect>
                <MudSelect Margin="Margin.Dense" @bind-Value="PRHeader.U_Branch" For="@(() => PRHeader.U_Branch)" Label="Branch" Variant="Variant.Outlined">
                    @foreach (var b in Branches)
                    {
                        <MudSelectItem Value="@b.Code.ToString()">@b.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Margin="Margin.Dense" @bind-Value="PRHeader.U_Department" For="@(() => PRHeader.U_Department)" Label="Department" Variant="Variant.Outlined">
                    @foreach (var d in Departments)
                    {
                        <MudSelectItem Value="@d.Code.ToString()">@d.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-4 gap-2">
                <MudTextField @bind-Value="PRHeader.U_DocNum" Label="Doc. No" For="@(() => PRHeader.U_DocNum)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField @bind-Value="PRHeader.U_DocStatus" Disabled="true" Label="Status" For="@(() => PRHeader.U_DocStatus)" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudDatePicker Label="Document Date" @bind-Date="PRHeader.U_TaxDate" For="@(() => PRHeader.U_TaxDate)" />
                <MudDatePicker Label="Required Date" @bind-Date="PRHeader.U_ReqDate" For="@(() => PRHeader.U_ReqDate)" />
                <MudSelect Margin="Margin.Dense" @bind-Value="PRHeader.U_Urgency" For="@(() => PRHeader.U_Urgency)" Label="Urgency Priority" Variant="Variant.Outlined">
                    @*for loop here if there is a supplier array data*@
                    <MudSelectItem Value="@("Low")" />
                    <MudSelectItem Value="@("Medium")" />
                    <MudSelectItem Value="@("High")" />
                </MudSelect>
                <MudTextField @bind-Value="PRHeader.U_PreparedBy" For="@(() => PRHeader.U_PreparedBy)" Label="Prepared By" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true" />
                <MudTextField @bind-Value="PRHeader.U_ReviewedBy" For="@(() => PRHeader.U_ReviewedBy)" Label="Reviewed By" Variant="Variant.Outlined" Margin="Margin.Dense" />


                @*<MudTextField @bind-Value="PRHeader.U_ApprovedBy1" Label="Approved By( Level 1)" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>
                <MudTextField @bind-Value="PRHeader.U_ApprovedBy2" Label="Approved By( Level 2)" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>
                <MudTextField @bind-Value="PRHeader.U_ApprovedBy3" Label="Approved By( Level 3)" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>
                <MudTextField @bind-Value="PRHeader.U_ApprovedBy4" Label="Approved By( Level 4)" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>
                <MudTextField @bind-Value="PRHeader.U_ApproverRemarks " Label="Approver Remarks" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="true"/>*@
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudTable Items="@PRLines" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
        <HeaderContent>
            <MudTh>
                <MudIconButton OnClick="AddLine" Icon="@Icons.Filled.AddBox" aria-label="add line" Color="Color.Primary" />
            </MudTh>
            <MudTh>#</MudTh>
            <MudTh style="white-space: nowrap!important;">Item Code</MudTh>
            <MudTh style="white-space: nowrap!important;">Item Description</MudTh>
            <MudTh style="white-space: nowrap!important;">Warehouse</MudTh>
            <MudTh style="white-space: nowrap!important;">Bin Location</MudTh>
            <MudTh style="white-space: nowrap!important;">Scope of Work</MudTh>
            <MudTh style="white-space: nowrap!important;">Scope Description</MudTh>
            <MudTh style="white-space: nowrap!important;">Material Code</MudTh>
            <MudTh style="white-space: nowrap!important;">Material Description</MudTh>
            <MudTh style="white-space: nowrap!important;">Quantity</MudTh>
            <MudTh style="white-space: nowrap!important;">Info Price</MudTh>
            <MudTh style="white-space: nowrap!important;">Units Of Measurement</MudTh>
            <MudTh style="white-space: nowrap!important;">Item Specification</MudTh>
            <MudTh style="white-space: nowrap!important;">Tax Code</MudTh>
            <MudTh style="white-space: nowrap!important;">On hand Quantity</MudTh>
            <MudTh style="white-space: nowrap!important;">Inventory Type</MudTh>
            <MudTh style="white-space: nowrap!important;">Inventory Purpose</MudTh>
        </HeaderContent>
        <RowTemplate Context="Items">
            <MudTd><MudIconButton OnClick="() => RemoveLine(PRLines.IndexOf(Items))" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error"></MudIconButton></MudTd>
            <MudTd>
                <input type="hidden" @bind-value="@Items.Code" />
                <input type="hidden" @bind-value="@Items.Name" />
                <input type="hidden" @bind-value="@Items.U_DocEntry" />
                <MudText>@(PRLines.IndexOf(Items) + 1)</MudText>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Item Code">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_ItemCode" For="@(() => Items.U_ItemCode)" Variant="Variant.Outlined">
                    @foreach (var i in ItemMaster)
                {
                    <MudSelectItem Value="@i.ItemCode">@i.ItemCode</MudSelectItem>
                }
                </MudSelect>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Item Description">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_Dscription" For="@(() => Items.U_Dscription)" Variant="Variant.Outlined">
                    @foreach (var i in ItemMaster)
                    {
                        <MudSelectItem Value="@i.ItemName">@i.ItemName</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Warehouse">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_WhsCode" For="@(() => Items.U_WhsCode)" Variant="Variant.Outlined">
                    @foreach (var i in Warehouse)
                    {
                        <MudSelectItem Value="@i.WarehouseCode">@i.WarehouseCode</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Bin Location">
                <MudTextField @bind-Value="@Items.U_BinLoc" For="@(() => Items.U_BinLoc)" />
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Scope of Work">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_Scope" For="@(() => Items.U_Scope)" Variant="Variant.Outlined">
                    @foreach (var i in ScopeOfWork)
                    {
                        <MudSelectItem Value="@i.FactorCode">@i.FactorCode</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Scope Description">
                <MudTextField @bind-Value="@Items.U_ScopeDesc" For="@(() => Items.U_ScopeDesc)" Disabled="true"/>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Material Code">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_MaterialCode" For="@(() => Items.U_MaterialCode)" Variant="Variant.Outlined">
                    @foreach (var i in ItemMaster)
                    {
                        <MudSelectItem Value="@i.ItemCode">@i.ItemCode</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Material Description">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_Dscription" For="@(() => Items.U_Dscription)" Variant="Variant.Outlined">
                    @foreach (var i in ItemMaster)
                    {
                        <MudSelectItem Value="@i.ItemName">@i.ItemName</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="Quantity">
                <MudTextField @bind-Value="@Items.U_Quantity" For="@(() => Items.U_Quantity)" />
            </MudTd>
            <MudTd DataLabel="Info Price">
                <MudTextField @bind-Value="@Items.U_InfoPrice" For="@(() => Items.U_InfoPrice)" />
            </MudTd>
            <MudTd DataLabel="Units Of Measurement">
                <MudTextField @bind-Value="@Items.U_UomCode" For="@(() => Items.U_UomCode)" />
            </MudTd>
            <MudTd DataLabel="Item Specification">
                <MudTextField @bind-Value="@Items.U_ItemSpecification" For="@(() => Items.U_ItemSpecification)" />
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Tax Code">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_TaxCode" For="@(() => Items.U_TaxCode)" Variant="Variant.Outlined">
                    @foreach (var i in VatGroup)
                    {
                        <MudSelectItem Value="@i.Code">@i.Code</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd DataLabel="On hand Quantity">
                <MudTextField @bind-Value="@Items.U_OnHandQuantity" For="@(() => Items.U_OnHandQuantity)" />
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Inventory Type">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_InventoryType" For="@(() => Items.U_InventoryType)" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("Short-Term")" />
                    <MudSelectItem Value="@("Mid-Term")" />
                    <MudSelectItem Value="@("Household")" />
                    <MudSelectItem Value="@("Order")" />
                    <MudSelectItem Value="@("Long-Term")" />
                </MudSelect>
            </MudTd>
            <MudTd Style="min-width:200px" DataLabel="Inventory Purpose">
                <MudSelect Margin="Margin.Dense" @bind-Value="Items.U_InventoryPurpose" For="@(() => Items.U_InventoryPurpose)" Variant="Variant.Outlined">
                    <MudSelectItem Value="@("Repair")" />
                    <MudSelectItem Value="@("Project")" />
                    <MudSelectItem Value="@("Assets")" />
                </MudSelect>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudGrid Spacing="2" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                <MudTextField T="string" Label="Remarks" @bind-Value="PRHeader.U_Remarks" For="@(() => PRHeader.U_Remarks)" Variant="Variant.Outlined" Lines="3" />
            </MudPaper>
        </MudItem>
        <MudItem xs="6" Class="d-flex flex-column justify-end">
            <MudPaper Elevation="0" Class="d-flex justify-end mud-width-full py-8 px-4 gap-2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Post</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Close" Color="Color.Error">Cancel</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private int docEntry = 0;
    private int docNum = 0;
    private string userName = string.Empty;
    // table settings
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private PRHeaderDto PRHeader = new PRHeaderDto();
    private List<PRLinesDto> PRLines = new List<PRLinesDto>();

    ProjectsDto SelectedProject = new ProjectsDto();
    DepartmentsDto SelectedDepartment = new DepartmentsDto();
    BranchesDto SelectedBranch = new BranchesDto();
    ItemsDto SelectedItem = new ItemsDto();
    WarehouseDto SelectedWhs = new WarehouseDto();
    VatGroupsDto SelectedVatGroup = new VatGroupsDto();

    CodeResponse? LastCodeResponse = new CodeResponse();
    DocEntryResponse? LastDocEntryResponse = new DocEntryResponse();
    DocNumResponse? LastDocNumSapResponse = new DocNumResponse();
    DocNumUdtResponse? LastDocNumUdtResponse = new DocNumUdtResponse();

    ProjectsResponse? ProjectResponse = new ProjectsResponse();
    DepartmentsResponse? DepartmentResponse = new DepartmentsResponse();
    BranchesResponse? BranchResponse = new BranchesResponse();
    ItemsResponse? ItemResponse = new ItemsResponse();
    WarehouseResponse? WhsResponse = new WarehouseResponse();
    VatGroupsResponse? VatGroupResponse = new VatGroupsResponse();
    ScopeOfWorkResponse? ScopeOfWorkResponse = new ScopeOfWorkResponse();

    List<ProjectsDto>? Projects = new List<ProjectsDto>();
    List<DepartmentsDto>? Departments = new List<DepartmentsDto>();
    List<BranchesDto>? Branches = new List<BranchesDto>();
    List<ItemsDto>? ItemMaster = new List<ItemsDto>();
    List<WarehouseDto>? Warehouse = new List<WarehouseDto>();
    List<VatGroupsDto>? VatGroup = new List<VatGroupsDto>();
    List<ScopeOfWorkDto>? ScopeOfWork = new List<ScopeOfWorkDto>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem> {
        new BreadcrumbItem("Requisition Slip", href: "requisition-slip", disabled: true)
    };

    // form validation
    bool success = false;
    private async Task OnSubmit(EditContext context)
    {
        try
        {
            HttpContent header = new StringContent(JsonConvert.SerializeObject(PRHeader), Encoding.UTF8, "application/json");
            var headerResponse = await HttpClient.PostAsync("U_FT_OPRQ", header);

            foreach (var line in PRLines)
            {
                HttpContent content = new StringContent(JsonConvert.SerializeObject(line), Encoding.UTF8, "application/json");
                var linesResponse = await HttpClient.PostAsync("U_FT_PRQ1", content);
            }

            Snackbar.Add("The Purchase Request was successfully posted!", Severity.Success);
            success = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            throw;
        }
    }

    // get method json ang makukua,
    protected override async Task OnInitializedAsync()
    {
        try
        {
            int lastDocEntry = 0;
            using var lastDocEntryResponse = await HttpClient.GetAsync("U_FT_OPRQ?$select=U_DocEntry&$orderby=U_DocEntry desc&$top=1");
            LastDocEntryResponse = await lastDocEntryResponse.Content.ReadFromJsonAsync<DocEntryResponse>();

            if (LastDocEntryResponse.value.Count != 0)
                lastDocEntry = LastDocEntryResponse.value[0].U_DocEntry;

            await FetchDropdownData();
            int lastDocNum = await GetLastDocNum();

            docEntry = lastDocEntry + 1;
            docNum = lastDocNum + 1;
            userName = LocalStorage.GetItem<string>("UserName");

            PRHeader.Code = docEntry.ToString();
            PRHeader.Name = docEntry.ToString();
            PRHeader.U_CardCode = userName;
            PRHeader.U_DocEntry = docEntry;
            PRHeader.U_DocNum = docNum.ToString();
            PRHeader.U_PreparedBy = userName;
            PRHeader.U_DocStatus = "Waiting For Approval";
            PRHeader.U_Department = LocalStorage.GetItem<string>("Department");
            PRHeader.U_Branch = LocalStorage.GetItem<string>("Branch");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            throw;
        }
    }

    void SelectProject(ProjectsDto context, string selectedString)
    {
        PRHeader.U_ProjectID = selectedString;
        var search = Projects.Where(e => e.Code == selectedString).Select(e => e.Name);
        PRHeader.U_ProjName = search.First();
    }

    async Task AddLine()
    {
        int lastCode = 0;
        var lastCodeResponse = await HttpClient.GetAsync("U_FT_PRQ1?$select=Code&$orderby=Code desc&$top=1");
        LastCodeResponse = await lastCodeResponse.Content.ReadFromJsonAsync<CodeResponse>();

        if (LastCodeResponse.value.Count != 0)
            lastCode = Convert.ToInt32(LastCodeResponse.value[0].Code);

        lastCode = lastCode + 1;

        PRLines.Add(new PRLinesDto
            {
                Code = lastCode.ToString(),
                Name = lastCode.ToString(),
                U_DocEntry = PRHeader.U_DocEntry.ToString(),
                U_ItemCode = null,
                U_Dscription = null,
                U_WhsCode = null,
                U_BinLoc = null,
                U_Scope = null,
                U_ScopeDesc = null,
                U_MaterialCode = null,
                U_MaterialDesc = null,
                U_Quantity = null,
                U_InfoPrice = null,
                U_UomCode = null,
                U_ItemSpecification = null,
                U_TaxCode = null,
                U_OnHandQuantity = null,
                U_InventoryType = null,
                U_InventoryPurpose = null
            });
    }

    void RemoveLine(int index)
    {
        PRLines.RemoveAt(index);
    }

    async Task FetchDropdownData()
    {
        using var projectsResponse = await HttpClient.GetAsync("Projects?$select=Code,Name");
        ProjectResponse = await projectsResponse.Content.ReadFromJsonAsync<ProjectsResponse>();
        Projects = ProjectResponse.value;

        using var departmentsResponse = await HttpClient.GetAsync("Departments?$select=Code,Name");
        DepartmentResponse = await departmentsResponse.Content.ReadFromJsonAsync<DepartmentsResponse>();
        Departments = DepartmentResponse.value;

        using var branchesResponse = await HttpClient.GetAsync("Branches?$select=Code,Name");
        BranchResponse = await branchesResponse.Content.ReadFromJsonAsync<BranchesResponse>();
        Branches = BranchResponse.value;

        using var itemsResponse = await HttpClient.GetAsync("Items?$select=ItemCode,ItemName");
        ItemResponse = await itemsResponse.Content.ReadFromJsonAsync<ItemsResponse>();
        ItemMaster = ItemResponse.value;

        using var whsResponse = await HttpClient.GetAsync("Warehouses?$select=WarehouseCode, WarehouseName&$orderby=WarehouseCode asc");
        WhsResponse = await whsResponse.Content.ReadFromJsonAsync<WarehouseResponse>();
        Warehouse = WhsResponse.value;

        using var vatGroupResponse = await HttpClient.GetAsync("VatGroups?$select=Code,Name&$orderby = Name asc");
        VatGroupResponse = await vatGroupResponse.Content.ReadFromJsonAsync<VatGroupsResponse>();
        VatGroup = VatGroupResponse.value;

        using var scopeOfWorkResponse = await HttpClient.GetAsync("DistributionRules?$select=FactorCode&$filter=InWhichDimension eq 2");
        ScopeOfWorkResponse = await scopeOfWorkResponse.Content.ReadFromJsonAsync<ScopeOfWorkResponse>();
        ScopeOfWork = ScopeOfWorkResponse.value;
    }

    async Task<int> GetLastDocNum()
    {
        int docNum = 0;
        int lastDocNumSAP = 0;
        int lastDocNumUdt = 0;

        using var lastDocNumSAPResponse = await HttpClient.GetAsync("PurchaseRequests?$select=DocNum&$orderby=DocNum desc&$top=1");
        LastDocNumSapResponse = await lastDocNumSAPResponse.Content.ReadFromJsonAsync<DocNumResponse>();

        using var lastDocNumUdtResponse = await HttpClient.GetAsync("U_FT_OPRQ?$select=U_DocNum&$orderby=U_DocEntry desc&$top=1");
        LastDocNumUdtResponse = await lastDocNumUdtResponse.Content.ReadFromJsonAsync<DocNumUdtResponse>();

        if (LastDocNumSapResponse.value.Count != 0)
            lastDocNumSAP = LastDocNumSapResponse.value[0].DocNum;

        if (LastDocNumUdtResponse.value.Count != 0)
            lastDocNumUdt = LastDocNumUdtResponse.value[0].U_DocNum;

        if (lastDocNumUdt > lastDocNumSAP)
            docNum = lastDocNumUdt;
        
        docNum = lastDocNumSAP;

        return docNum;
    }
}