@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using TCPI_PR_Portal.Shared.RequisitionSlip;
@using TCPI_PR_Portal.Shared;
@using System.Text;

@page "/requisition-slip";
@attribute [Authorize];
@inject HttpClient HttpClient;

<Title PageName="Requisition Slip" Breadcrumb="_items" />

<EditForm Model="@PRHeader" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <PRFormHeader PRHeader="@PRHeader" />
    <PRFormLines PRLines="@PRLines" />

    <MudGrid Spacing="2" Justify="Justify.Center">
        <MudItem xs="6">
            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                <MudTextField T="string" Label="Remarks" @bind-Value="PRHeader.U_Remarks" Variant="Variant.Outlined" Text="" Lines="3" />
            </MudPaper>
        </MudItem>
        <MudItem xs="6" Class="d-flex flex-column justify-end">
            <MudPaper Elevation="0" Class="d-flex justify-end mud-width-full py-8 px-4 gap-2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Post</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Close" Color="Color.Error">Cancel</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private PRHeaderDto PRHeader = new PRHeaderDto();
    private List<PRLinesDto> PRLines = new List<PRLinesDto>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem> { 
        new BreadcrumbItem("Requisition Slip", href: "requisition-slip", disabled: true)
    };

    // form validation
    bool success = false;
    private async Task OnValidSubmit(EditContext context)
    {
        Console.WriteLine("Submitted");
        HttpContent header = new StringContent(JsonConvert.SerializeObject(PRHeader), Encoding.UTF8, "application/json");
        var headerResponse = await HttpClient.PostAsync("U_FT_OPRQ", header);

        HttpContent lines = new StringContent(JsonConvert.SerializeObject(PRLines), Encoding.UTF8, "application/json");
        var linesResponse = await HttpClient.PostAsync("U_FT_PRQ1", lines);

        success = true;
        StateHasChanged();
    }

    // get method json ang makukua,
    protected override async Task OnInitializedAsync()
    {
        PRHeader.U_DocStatus = "Waiting For Approval";
    }
}