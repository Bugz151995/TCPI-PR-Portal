@using Blazor.SubtleCrypto;
@using Newtonsoft.Json;
@using TCPI_PR_Portal.Services;
@using TCPI_PR_Portal.Shared;
@using Microsoft.AspNetCore.Authorization;
@using System.Text;
@inject IAuthService AuthService;
@inject ICryptoService Crypto;
@inject ISnackbar Snackbar;
@inject HttpClient HttpClient;
@inject NavigationManager Navigation;
@attribute [Authorize];

@page "/user-setup";

<Title PageName="User Setup" Breadcrumb="_items" />

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
	<input type="hidden" @bind-value="User.Name" />
	<DataAnnotationsValidator />

	<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="@Color.Inherit">
		<MudTabPanel>
			<TabContent>
				<MudIcon Icon="@Icons.Filled.PersonAddAlt1" Title="Favorite" Size="Size.Small" Class="me-2" />
				<MudText Typo="Typo.subtitle2">
					Personal Information
				</MudText>
			</TabContent>
			<ChildContent>
				<MudGrid Spacing="3" Justify="Justify.Center">
					<MudItem xs="6">
						<MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
							<MudAutocomplete Label="User Code" T="string" ValueChanged="value => OnValueChanged(value)" Value="@User.Code" SearchFunc="@SearchUserCode" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
							<MudTextField Elevation="0" InputType="InputType.Password" @bind-Value="User.U_Password" For="@(() => User.U_Password)" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField Elevation="0" @bind-Value="User.U_Employee" For="@(() => User.U_Employee)" Label="Employee Name" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
							<div style="display: @displayLevel">
								<MudSelect Margin="Margin.Dense" @bind-Value="User.U_ApprovalLevel" For="@(() => User.U_ApprovalLevel)" Label="Approval Level" Variant="Variant.Outlined">
									<MudSelectItem Value="@("Level 1")" />
									<MudSelectItem Value="@("Level 2")" />
									<MudSelectItem Value="@("Level 3")" />
									<MudSelectItem Value="@("Level 4")" />
								</MudSelect>
							</div>
							@*<MudSelect Margin="Margin.Dense" @bind-Value="User.U_Branch" For="@(() => User.U_Branch)" Label="Branch" Variant="Variant.Outlined">
								@foreach (var b in Branches)
								{
									<MudSelectItem Value="@b.Code">@b.Name</MudSelectItem>
								}
							</MudSelect>
							<MudSelect Margin="Margin.Dense" @bind-Value="User.U_Department" For="@(() => User.U_Department)" Label="Department" Variant="Variant.Outlined">
								@foreach (var d in Departments)
								{
									<MudSelectItem Value="@d.Code">@d.Name</MudSelectItem>
								}
							</MudSelect>*@
							@*<MudTextField Elevation="0" @bind-Value="User.U_CostCenter" Label="Cost Center" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />*@
						</MudPaper>
					</MudItem>

					<MudItem xs="6">
						<MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
							<MudTextField Elevation="0" @bind-Value="User.U_EmailAddress" For="@(() => User.U_EmailAddress)" Label="Email Address" Variant="Variant.Outlined" Margin="Margin.Dense" />
							<MudTextField Elevation="0" @bind-Value="User.U_UserName" For="@(() => User.U_UserName)" Label="User Name" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
							<MudSelect T="string" Value="User.U_Role" For="@(() => User.U_Role)" ValueChanged="value => SelectRole(User, value)" Margin="Margin.Dense" Label="Role" Variant="Variant.Outlined">
								<MudSelectItem Value="@("Admin")" />
								<MudSelectItem Value="@("Requestor")" />
								<MudSelectItem Value="@("Approver")" />
							</MudSelect>
						</MudPaper>
					</MudItem>
				</MudGrid>

				<div style="display: @displayApprover">
					<div class="d-flex gap-1 align-center">
						<MudIcon Icon="@Icons.Filled.NewLabel" Title="Breadcrumb" Color="Color.Primary" />
						<MudText>Approver Details</MudText>
					</div>
					<MudGrid Spacing="3" Justify="Justify.Center">
						<MudItem xs="6">
							<MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverCode1" Label="Approver Code 1" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverCode2" Label="Approver Code 2" Variant="Variant.Outlined" Margin="Margin.Dense" />
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverCode3" Label="Approver Code 3" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverCode4" Label="Approver Code 4" Variant="Variant.Outlined" Margin="Margin.Dense" />
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverSpecialCode" Label="Approver Code Special" Variant="Variant.Outlined" Margin="Margin.Dense" />
							</MudPaper>
						</MudItem>

						<MudItem xs="6">
							<MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
								<MudTextField Elevation="0" @bind-Value="User.U_Approver1" Label="Approver Name 1" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
								<MudTextField Elevation="0" @bind-Value="User.U_Approver2" Label="Approver Name 2" Variant="Variant.Outlined" Margin="Margin.Dense" />
								<MudTextField Elevation="0" @bind-Value="User.U_Approver3" Label="Approver Name 3" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
								<MudTextField Elevation="0" @bind-Value="User.U_Approver4" Label="Approver Name 4" Variant="Variant.Outlined" Margin="Margin.Dense" />
								<MudTextField Elevation="0" @bind-Value="User.U_ApproverSpecial" Label="Approver Special" Variant="Variant.Outlined" Margin="Margin.Dense" />
							</MudPaper>
						</MudItem>

						<MudItem xs="6"></MudItem>
					</MudGrid>
				</div>

				<MudGrid Spacing="3" Justify="Justify.FlexEnd">
					<MudItem xs="4">
						<MudCardActions Class="d-flex justify-end gap-2">
							<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
							<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close">Cancel</MudButton>
						</MudCardActions>
					</MudItem>
				</MudGrid>
			</ChildContent>
		</MudTabPanel>

		<MudTabPanel>
			<TabContent>
				<MudIcon Icon="@Icons.Filled.ViewModule" Title="Favorite" Size="Size.Small" Class="me-2" />
				<MudText Typo="Typo.subtitle2">Modules Assignment</MudText>
			</TabContent>
			<ChildContent>Under Development</ChildContent>
		</MudTabPanel>

		<MudTabPanel>
			<TabContent>
				<MudIcon Icon="@Icons.Filled.BusinessCenter" Title="Favorite" Size="Size.Small" Class="me-2" />
				<MudText Typo="Typo.subtitle2">Project Assignment</MudText>
			</TabContent>
			<ChildContent>Under Development</ChildContent>
		</MudTabPanel>
	</MudTabs>
</EditForm>

@code {
	bool success = false;
	string displayApprover = "none";
	string displayLevel = "none";

	UserDto User = new UserDto();
	DepartmentsDto SelectedDepartment;
	DepartmentsResponse? DeptResponse = new DepartmentsResponse();
	List<DepartmentsDto>? Departments = new List<DepartmentsDto>();

	List<SAPUserDto> SapUser = new List<SAPUserDto>();
	UserResponse? SapUserResponse = new UserResponse();
	List<string> userCodes = new List<string>();

	private Roles roleValue { get; set; }
	public enum Roles { Admin, Requestor, Approver };

	private List<BreadcrumbItem> _items = new List<BreadcrumbItem> {
		new BreadcrumbItem("User Setup", href: "user-setup", disabled: true)
	};

	private async Task OnValidSubmit(EditContext context)
	{
		try
		{
			//string password = User.U_Password;
			//CryptoResult encryptedPassword = await Crypto.EncryptAsync(password);
			//User.U_Password = encryptedPassword.Value;
			HttpContent content = new StringContent(JsonConvert.SerializeObject(User), Encoding.UTF8, "application/json");
			using var response = await HttpClient.PostAsync("U_FT_WPUS", content);

			if (!response.IsSuccessStatusCode)
			{
				Snackbar.Add("A new User was successfully created!", Severity.Success);
				Console.WriteLine(response.ReasonPhrase);
				return;
			}

			Snackbar.Add("A new User was successfully created!", Severity.Success);

			success = true;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
			throw;
		}
	}

	protected override async void OnInitialized()
	{
		//Uncomment this to get the list of departments
		var response = await HttpClient.GetAsync("Departments?$select=Code,Name");
		DeptResponse = await response.Content.ReadFromJsonAsync<DepartmentsResponse>();
		Departments = DeptResponse.value;

		if (!response.IsSuccessStatusCode)
		{
			Snackbar.Add("Session has expired", Severity.Error);
			AuthService.Logout();
			Navigation.NavigateTo("/");
		}

		using var userResponse = await HttpClient.GetAsync($"Users?$select=UserCode,UserName,eMail,Branch,Department&$orderby=InternalKey desc");
		SapUserResponse = await userResponse.Content.ReadFromJsonAsync<UserResponse>();
		SapUser = SapUserResponse.value;

		foreach (var item in SapUser)
		{
			userCodes.Add(item.UserCode);
		}
	}

	void SelectRole(UserDto context, string selectedString)
	{
		context.U_Role = selectedString;
		displayApprover = selectedString == "Requestor" ? "block" : "none";
		displayLevel = selectedString == "Approver" ? "block" : "none";
	}

	private void OnValueChanged(string value)
	{
		User.Code = value;
		SAPUserDto result = SapUser.Find(e => e.UserCode == User.Code);
		User.U_UserName = result.UserName;
		User.U_EmailAddress = result.eMail;
	}

	private async Task<IEnumerable<string>> SearchUserCode(string value)
	{
		// if text is null or empty, show complete list
		if (string.IsNullOrEmpty(value))
			return userCodes;

		return userCodes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}
}