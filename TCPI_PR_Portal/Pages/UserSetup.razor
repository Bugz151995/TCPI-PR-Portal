@using Blazor.SubtleCrypto;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using TCPI_PR_Portal.Data;
@using TCPI_PR_Portal.Services;
@using TCPI_PR_Portal.Shared;
@using Microsoft.AspNetCore.Authorization;
@using System.Text;
@inject IAuthService AuthService;
@inject ICryptoService Crypto;
@inject ISnackbar Snackbar;
@inject HttpClient HttpClient;
@inject NavigationManager Navigation;
@attribute [Authorize];

@page "/user-setup";

<Title PageName="User Setup" Breadcrumb="_items" />

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
    <input type="hidden" @bind-value="User.Name" />
    <DataAnnotationsValidator />

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="@Color.Inherit">
        <MudTabPanel>
            <TabContent>
                <MudIcon Icon="@Icons.Filled.PersonAddAlt1" Title="Favorite" Size="Size.Small" Class="me-2" />
                <MudText Typo="Typo.subtitle2">
                    Personal Information
                </MudText>
            </TabContent>
            <ChildContent>
                <MudGrid Spacing="3" Justify="Justify.Center">
                    <MudItem xs="6">
                        <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                            <MudAutocomplete Label="User Code" T="string" ValueChanged="value => OnValueChanged(value)" Value="User.U_UserCode" For="@(() => User.U_UserCode)" SearchFunc="@SearchUserCode" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                            <MudTextField Elevation="0" InputType="InputType.Password" @bind-Value="User.U_Password" For="@(() => User.U_Password)" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <MudTextField Elevation="0" @bind-Value="User.U_Employee" For="@(() => User.U_Employee)" Label="Employee Name" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
                            <div style="display: @displayLevel">
                                <MudSelect Margin="Margin.Dense" @bind-Value="User.U_ApproverLevel" For="@(() => User.U_ApproverLevel)" Label="Approver Level" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Level 1")" />
                                    <MudSelectItem Value="@("Level 2")" />
                                    <MudSelectItem Value="@("Level 3")" />
                                    <MudSelectItem Value="@("Level 4")" />
                                    <MudSelectItem Value="@("Special")" />
                                </MudSelect>
                            </div>
                            @*<MudSelect Margin="Margin.Dense" @bind-Value="User.U_Branch" For="@(() => User.U_Branch)" Label="Branch" Variant="Variant.Outlined">
                            @foreach (var b in Branches)
                            {
                            <MudSelectItem Value="@b.Code">@b.Name</MudSelectItem>
                            }
                            </MudSelect>
                            <MudSelect Margin="Margin.Dense" @bind-Value="User.U_Department" For="@(() => User.U_Department)" Label="Department" Variant="Variant.Outlined">
                            @foreach (var d in Departments)
                            {
                            <MudSelectItem Value="@d.Code">@d.Name</MudSelectItem>
                            }
                            </MudSelect>*@
                            @*<MudTextField Elevation="0" @bind-Value="User.U_CostCenter" Label="Cost Center" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />*@
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="6">
                        <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                            <MudTextField Elevation="0" @bind-Value="User.U_EmailAddress" For="@(() => User.U_EmailAddress)" Label="Email Address" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <MudTextField Elevation="0" @bind-Value="User.U_UserName" For="@(() => User.U_UserName)" Label="User Name" Variant="Variant.Outlined" Margin="Margin.Dense" disable="true" />
                            <MudSelect T="string" Value="User.U_Role" For="@(() => User.U_Role)" ValueChanged="value => SelectRole(User, value)" Margin="Margin.Dense" Label="Role" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Admin")" />
                                <MudSelectItem Value="@("Requestor")" />
                                <MudSelectItem Value="@("Approver")" />
                            </MudSelect>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <div style="display: @displayApprover">
                    <div class="d-flex gap-1 align-center">
                        <MudIcon Icon="@Icons.Filled.NewLabel" Title="Breadcrumb" Color="Color.Primary" />
                        <MudText>Approver Details</MudText>
                    </div>
                    <MudGrid Spacing="3" Justify="Justify.Center">
                        <MudItem xs="6">
                            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                                <MudAutocomplete Label="Approver Code 1" T="string" ValueChanged="value => OnValueChanged1(value)" Value="User.U_ApproverCode1" For="@(() => User.U_ApproverCode1)" SearchFunc="@SearchApprover1" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                                <MudAutocomplete Label="Approver Code 2" T="string" ValueChanged="value => OnValueChanged2(value)" Value="User.U_ApproverCode2" For="@(() => User.U_ApproverCode2)" SearchFunc="@SearchApprover2" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                                <MudAutocomplete Label="Approver Code 3" T="string" ValueChanged="value => OnValueChanged3(value)" Value="User.U_ApproverCode3" For="@(() => User.U_ApproverCode3)" SearchFunc="@SearchApprover3" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                                <MudAutocomplete Label="Approver Code 4" T="string" ValueChanged="value => OnValueChanged4(value)" Value="User.U_ApproverCode4" For="@(() => User.U_ApproverCode4)" SearchFunc="@SearchApprover4" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                                <MudAutocomplete Label="Approver Code Special" T="string" ValueChanged="value => OnValueChangedSpec(value)" Value="User.U_ApproverSpecialCode" For="@(() => User.U_ApproverSpecialCode)" SearchFunc="@SearchApproverSpecial" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined" />
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6">
                            <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full py-8 px-1 gap-2">
                                <MudTextField Elevation="0" @bind-Value="User.U_Approver1" Label="Approver Name 1" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField Elevation="0" @bind-Value="User.U_Approver2" Label="Approver Name 2" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField Elevation="0" @bind-Value="User.U_Approver3" Label="Approver Name 3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField Elevation="0" @bind-Value="User.U_Approver4" Label="Approver Name 4" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                <MudTextField Elevation="0" @bind-Value="User.U_ApproverSpecial" Label="Approver Special" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="6"></MudItem>
                    </MudGrid>
                </div>

                <MudGrid Spacing="3" Justify="Justify.FlexEnd">
                    <MudItem xs="4">
                        <MudCardActions Class="d-flex justify-end gap-2">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Close">Cancel</MudButton>
                        </MudCardActions>
                    </MudItem>
                </MudGrid>
            </ChildContent>
        </MudTabPanel>

        <MudTabPanel>
            <TabContent>
                <MudIcon Icon="@Icons.Filled.ViewModule" Title="Favorite" Size="Size.Small" Class="me-2" />
                <MudText Typo="Typo.subtitle2">Modules Assignment</MudText>
            </TabContent>
            <ChildContent>Under Development</ChildContent>
        </MudTabPanel>

        <MudTabPanel>
            <TabContent>
                <MudIcon Icon="@Icons.Filled.BusinessCenter" Title="Favorite" Size="Size.Small" Class="me-2" />
                <MudText Typo="Typo.subtitle2">Project Assignment</MudText>
            </TabContent>
            <ChildContent>Under Development</ChildContent>
        </MudTabPanel>
    </MudTabs>
</EditForm>

@code {
    bool success = false;
    string displayApprover = "none";
    string displayLevel = "none";

    UserDto User = new UserDto();
    //DepartmentsDto SelectedDepartment = new DepartmentsDto();
    //DepartmentsResponse? DeptResponse = new DepartmentsResponse();
    //List<DepartmentsDto>? Departments = new List<DepartmentsDto>();

    List<SAPUserDto>? SapUser = new List<SAPUserDto>();
    List<PortalUserDto>? PortalUser = new List<PortalUserDto>();
    List<string> userCodes = new List<string>();
    List<string> approver1Codes = new List<string>();
    List<string> approver2Codes = new List<string>();
    List<string> approver3Codes = new List<string>();
    List<string> approver4Codes = new List<string>();
    List<string> approverSpecCodes = new List<string>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem> {
        new BreadcrumbItem("User Setup", href: "user-setup", disabled: true)
    };

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            //string password = User.U_Password;
            //CryptoResult encryptedPassword = await Crypto.EncryptAsync(password);
            //User.U_Password = encryptedPassword.Value;

            JObject codeJson = await GetData("U_FT_WPUS?$select=Code&$orderby=Code desc&$top=1");
            CodeDto code = codeJson["value"][0].ToObject<CodeDto>();
            Console.WriteLine(JsonConvert.SerializeObject(code));
            int nextCode = Convert.ToInt32(code.Code) + 1;
            User.Code = nextCode.ToString();
            User.Name = nextCode.ToString();

            HttpContent content = new StringContent(JsonConvert.SerializeObject(User), Encoding.UTF8, "application/json");
            using var response = await HttpClient.PostAsync("U_FT_WPUS", content);

            if (!response.IsSuccessStatusCode)
            {
                Snackbar.Add(response.ReasonPhrase, Severity.Error);
                Console.WriteLine(response.ReasonPhrase);
                return;
            }

            Snackbar.Add("A new User was successfully created!", Severity.Success);

            User = new UserDto();
            success = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            throw;
        }
    }

    protected override async void OnInitialized()
    {
        //Uncomment this to get the list of departments
        //var response = await HttpClient.GetAsync("Departments?$select=Code,Name");
        //DeptResponse = await response.Content.ReadFromJsonAsync<DepartmentsResponse>();
        //Departments = DeptResponse.value;

        await GetUsers();
        await GetApprovers();       
        foreach (var item in PortalUser)
        {
            if (item.U_Role == "Approver" && item.U_ApproverLevel == "Level 1")
                approver1Codes.Add(item.U_UserCode);

            if (item.U_Role == "Approver" && item.U_ApproverLevel == "Level 2")
                approver2Codes.Add(item.U_UserCode);

            if (item.U_Role == "Approver" && item.U_ApproverLevel == "Level 3")
                approver3Codes.Add(item.U_UserCode);

            if (item.U_Role == "Approver" && item.U_ApproverLevel == "Level 4")
                approver4Codes.Add(item.U_UserCode);

            if (item.U_Role == "Approver" && item.U_ApproverLevel == "Special")
                approverSpecCodes.Add(item.U_UserCode);
        }
    }

    void SelectRole(UserDto context, string selectedString)
    {
        context.U_Role = selectedString;
        displayApprover = selectedString == "Requestor" ? "block" : "none";
        displayLevel = selectedString == "Approver" ? "block" : "none";
    }

    private void OnValueChanged(string value)
    {
        User.U_UserCode = value;
        SAPUserDto result = SapUser.Find(e => e.UserCode == User.U_UserCode);
        User.U_UserName = result.UserName;
        User.U_EmailAddress = result.eMail;
    }

    private void OnValueChanged1(string value)
    {
        User.U_ApproverCode1 = value;
        PortalUserDto result = PortalUser.Find(e => e.U_UserCode == value);
        User.U_Approver1 = result.U_UserName;
    }

    private void OnValueChanged2(string value)
    {
        User.U_ApproverCode2 = value;
        PortalUserDto result = PortalUser.Find(e => e.U_UserCode == value);
        User.U_Approver2 = result.U_UserName;
    }

    private void OnValueChanged3(string value)
    {
        User.U_ApproverCode3 = value;
        PortalUserDto result = PortalUser.Find(e => e.U_UserCode == value);
        User.U_Approver3 = result.U_UserName;
    }

    private void OnValueChanged4(string value)
    {
        User.U_ApproverCode4 = value;
        PortalUserDto result = PortalUser.Find(e => e.U_UserCode == value);
        User.U_Approver4 = result.U_UserName;
    }

    private void OnValueChangedSpec(string value)
    {
        User.U_ApproverSpecialCode = value;
        PortalUserDto result = PortalUser.Find(e => e.U_UserCode == value);
        User.U_ApproverSpecial = result.U_UserName;
    }

    private async Task<IEnumerable<string>> SearchUserCode(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return userCodes;

        return userCodes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchApprover1(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return approver1Codes;

        return approver1Codes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchApprover2(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return approver2Codes;

        return approver2Codes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchApprover3(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return approver3Codes;

        return approver3Codes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchApprover4(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return approver4Codes;

        return approver4Codes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchApproverSpecial(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return approverSpecCodes;

        return approverSpecCodes.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task<JObject> GetData(string query)
    {
        using var response = await HttpClient.GetAsync(query);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Session has expired", Severity.Error);
            AuthService.Logout();
            Navigation.NavigateTo("/");
        }
        string content = await response.Content.ReadAsStringAsync();
        return JObject.Parse(content);
    }

    async Task GetUsers()
    {
        string query = "Users?$select=UserCode,UserName,eMail,Branch,Department&$orderby=InternalKey desc";
        JObject json;
        do
        {
            json = await GetData(query);

            SapUser.AddRange(json["value"].ToObject<List<SAPUserDto>>());

            if (json.ContainsKey("odata.nextLink"))
                query = json["odata.nextLink"].ToString();
        } while (json.ContainsKey("odata.nextLink"));

        foreach (var item in SapUser)
        {
            userCodes.Add(item.UserCode);
        }
    } 

    async Task GetApprovers()
    {
        string query = "U_FT_WPUS?$select=U_UserCode,U_UserName,U_Role,U_ApproverLevel,U_Employee,U_EmailAddress&$orderby=Code desc";
        JObject json;
        do
        {
            json = await GetData(query);

            PortalUser.AddRange(json["value"].ToObject<List<PortalUserDto>>());

            if (json.ContainsKey("odata.nextLink"))
                query = json["odata.nextLink"].ToString();
        } while (json.ContainsKey("odata.nextLink"));
    }
}