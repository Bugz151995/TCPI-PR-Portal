@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@using Newtonsoft.Json;
@using System.Security.Claims;
@using TCPI_PR_Portal.Data;
@using TCPI_PR_Portal.Shared;
@using System.Text;
@using System.Security.Cryptography;
@using Blazor.SubtleCrypto;
@using TCPI_PR_Portal.Services;
@inject ICryptoService Crypto;
@inject ISnackbar Snackbar;
@inject HttpClient HttpClient;
@inject NavigationManager Navigation;
@inject IAuthService AuthService;
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWLocalStorageService LocalStorage;

@attribute [AllowAnonymous];
@page "/"

<EditForm Model="@User" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid Class="justify-center">
        <MudItem xs="12" sm="5">
            <MudCard Elevation="25" Class="pa-8">
                <div class="d-flex justify-center mb-10">
                    <MudImage ObjectFit="ObjectFit.Contain" Height="200" Width="400"
                              Src="420px-Taiheiyo_Cement_Logo.png" Alt="Taiheiyo Cement Logo" Class="rounded-lg" />
                </div>
                <MudCardContent>
                    <MudTextField Label="Username" HelperText="" @bind-Value="User.U_UserName"
                                  For="@(() => User.U_UserName)" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Primary"
                                  Variant="Variant.Outlined" />
                    <MudTextField Label="Password" HelperText="" Class="mt-3" @bind-Value="User.U_Password"
                                  For="@(() => User.U_Password)" InputType="InputType.Password" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock" AdornmentColor="Color.Primary"
                                  Variant="Variant.Outlined" />
                    <MudPaper Elevation="0" Class="d-flex justify-end">
                        <MudCheckBox T="bool" Label="Remember me" UnCheckedColor="Color.Primary"
                                     Color="Color.Primary" />
                    </MudPaper>
                </MudCardContent>
                <MudCardActions Class="justify-center pa-3">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                               Size="Size.Large">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    LoginDto User = new LoginDto();
    LoginResponse account = new LoginResponse();
    bool success;

    protected override async void OnInitialized()
    {
        var credential = new
        {
            CompanyDB = "TCPI_TESTDB",
            UserName = "manager",
            Password = "ftsi"
        };

        HttpContent content = new StringContent(JsonConvert.SerializeObject(credential), Encoding.UTF8, "application/json");

        using var sapLogin = await HttpClient.PostAsync("Login", content);

        if (!sapLogin.IsSuccessStatusCode)
            Snackbar.Add(sapLogin.ReasonPhrase, Severity.Error);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var isAccountValid = await ValidateAccount();

            if (isAccountValid)
            {
                await LocalStorage.SetItemAsync("Code", account.value[0].Code);
                await LocalStorage.SetItemAsync("EmployeeName", account.value[0].U_Employee);
                await LocalStorage.SetItemAsync("Role", account.value[0].U_Role);
                await LocalStorage.SetItemAsync("U_ApproverCode1", account.value[0].U_ApproverCode1);
                await LocalStorage.SetItemAsync("U_ApproverCode2", account.value[0].U_ApproverCode2);
                await LocalStorage.SetItemAsync("U_ApproverCode3", account.value[0].U_ApproverCode3);
                await LocalStorage.SetItemAsync("U_ApproverCode4", account.value[0].U_ApproverCode4);
                await LocalStorage.SetItemAsync("U_ApproverSpecialCode", account.value[0].U_ApproverSpecialCode);
                await LocalStorage.SetItemAsync("U_Approver1", account.value[0].U_Approver1);
                await LocalStorage.SetItemAsync("U_Approver2", account.value[0].U_Approver2);
                await LocalStorage.SetItemAsync("U_Approver3", account.value[0].U_Approver3);
                await LocalStorage.SetItemAsync("U_Approver4", account.value[0].U_Approver4);
                await LocalStorage.SetItemAsync("U_ApproverSpecial", account.value[0].U_ApproverSpecial);

                AuthService.Login(account.value[0].U_Employee, account.value[0].U_Role);
                Navigation.NavigateTo("user-setup");
            }

            success = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Oops! There seems to be a problem with the App. Please contact the Administrator.", Severity.Error);
            Snackbar.Add(ex.Message, Severity.Error);
            throw;
        }
    }

    async Task<bool> ValidateAccount()
    {
        using var matchedUserAccount = await HttpClient.GetAsync($"U_FT_WPUS?$select=U_Role,U_Password,Code,U_Employee,U_ApproverCode1,U_ApproverCode2,U_ApproverCode3,U_ApproverCode4,U_ApproverSpecialCode,U_Approver1,U_Approver2,U_Approver3,U_Approver4,U_ApproverSpecial&$filter=U_UserName eq '{User.U_UserName}'");

        if (!matchedUserAccount.IsSuccessStatusCode)
        {
            Snackbar.Add(matchedUserAccount.ReasonPhrase, Severity.Error);
            return false;
        }

        account = await matchedUserAccount.Content.ReadFromJsonAsync<LoginResponse>();

        if (account.value.Count <= 0)
            Snackbar.Add("User not found!", Severity.Error);

        if (account.value[0].U_Password != User.U_Password)
        {
            Snackbar.Add("Password is incorrect!", Severity.Error);
            return false;
        }

        return true;
    }
}