@using System.Net.Http.Json;
@using Newtonsoft.Json.Linq;
@inject HttpClient HttpClient;
@inject ISnackbar Snackbar;

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height: 300px; overflow-y: scroll">
            <MudTable Items="@ItemList" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<PRLinesDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Item Code</MudTh>
                    <MudTh>Item Description</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Item Code">@context.U_ItemCode</MudTd>
                    <MudTd DataLabel="Item Description">@context.U_Dscription</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public PRLinesDto Item { get; set; }

    private List<PRLinesDto> ItemList = new List<PRLinesDto>();

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private string searchString = "";
    private PRLinesDto selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        string query = "Items?$select=ItemCode,ItemName";
        JObject json;
        var result = await GetData(query);
        do
        {
            json = JObject.Parse(result);
            ItemList.AddRange(json["value"].ToObject<List<PRLinesDto>>());
            if (json.ContainsKey("odata.nextLink"))
                query = json["odata.nextLink"].ToString();

        } while (json.ContainsKey("odata.nextLink"));
    }
    private bool FilterFunc1(PRLinesDto element) => FilterFunc(element, searchString);

    private bool FilterFunc(PRLinesDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.U_ItemCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.U_Dscription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task<string> GetData(string query)
    {
        using var response = await HttpClient.GetAsync(query);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Oops! Something went wrong. This might be a server fault. Try to log-out and log-in.", Severity.Error);
        }

        string content = await response.Content.ReadAsStringAsync();
        return content;
    }

}